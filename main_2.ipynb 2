{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [],
   "source": [
    "#importo tutto \n",
    "import pandas as pd\n",
    "import requests\n",
    "from collections import defaultdict\n",
    "import datetime as dt\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import random\n",
    "import pathlib \n",
    "from pathlib import Path\n",
    "import sys\n",
    "import time\n",
    "import csv\n",
    "import os\n",
    "import logging\n",
    "import seaborn as sns\n",
    "from datetime import timedelta,date"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [],
   "source": [
    "# dichiaro i vari percorsi \n",
    "path_abs = str(pathlib.Path().parent.absolute())\n",
    "path_materiale = \"{}/materiale/results/\".format(path_abs)\n",
    "file_path = \"{}/materiale/\".format(path_abs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "C:\\Users\\lyk\\Desktop\\roby\\Cloud_Traccia_1\n",
      "errore 2 \n"
     ]
    }
   ],
   "source": [
    "#creo le cartelle \n",
    "def check_dir(path_materiale):\n",
    "    print(path_abs)\n",
    "    if os.path.isdir(path_materiale) == False:\n",
    "        \n",
    "        try: \n",
    "            os.makedirs(path_materiale)\n",
    "            #print('cartella fatta ')\n",
    "            logger.info(\"cartella {} fatta.\".format(path_materiale))\n",
    "\n",
    "        except OSError as error:\n",
    "            #print('errore 1 ')\n",
    "            logger.info(\"errore 1\" )\n",
    "            return([\"error\",'Errore nella creazione della directory \"{}\"'.format(path_materiale)])\n",
    "\n",
    "    if os.path.isdir(path_materiale) == True:\n",
    "        print('errore 2 ')\n",
    "        return([\"info\",'La directory \"{}\" è stata creata correttamente'.format(path_materiale)])\n",
    "\n",
    "res = check_dir(path_materiale)\n",
    "\n",
    "\n",
    "logging.basicConfig(handlers=[logging.FileHandler(filename=path_materiale+'filelog.log', encoding='utf-8', mode='a+')],format='%(asctime)s - %(levelname)s - %(message)s', level=logging.INFO)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [],
   "source": [
    "#####################################\n",
    "#CONTROLLO ESISTENZA PERCORSI E FILE\n",
    "#COLLEZIONO LOG\n",
    "#####################################\n",
    "#se si trova nella cartella principale lo carico da la e il path è abs sennò lo carico dentro materiale in modo da darlo anche all'utente\n",
    "file_locale = \"\"\n",
    "def down_file(url, filename):\n",
    "    if \"titanic\" in filename:\n",
    "        filename = \"titanic.csv\"\n",
    "    \n",
    "    #logger.info(\"Non è stato trovato la sorgente {}. Lo sto scaricando dalla rete\".format(filename))\n",
    "\n",
    "    try:\n",
    "        print('sto scaricando il file' )\n",
    "        response = requests.get(url)\n",
    "        if response.status_code == 200:\n",
    "            with open(file_path+filename, 'wb') as f:\n",
    "                for chunk in response.iter_content():\n",
    "                    if chunk: # filter out keep-alive new chunks\n",
    "                        f.write(chunk)\n",
    "            #log.append({\"desc\":\"Scaricata sorgente dati dati da {}\".format(url),\"code\":response})\n",
    "          #  logger.info(\"{} è stato scaricato, testo della response: {}\".format(filename,response) )\n",
    "        else:\n",
    "            print('wertyu')\n",
    "           # logger.warning(\"Il sito ha risposto un codice errore diverso da 200 ({})\".format(response.status_code))\n",
    "\n",
    "    except Exception as e:\n",
    "        print('sdfghj')\n",
    "       # logger.error(\"Qualcosa è andato storto nello scaricare {}\\n{}\".format(filename,e))\n",
    "    \n",
    "    return file_path+filename\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [],
   "source": [
    "def check_file():\n",
    "    file_list = []\n",
    "    \n",
    "    # Get the list of all files and directories\n",
    "    dir_list = os.listdir(file_path)\n",
    "    #controlliamo se esistono entrambi i file, sennò scarichiamo\n",
    "    f_v = f_p = False\n",
    "    for file in dir_list:\n",
    "        if \"csv\" and \"titanic\" in file:\n",
    "            f_p = True\n",
    "            file_list.append({'titanic': \"{}/{}\".format(file_path,file)}) \n",
    "            \n",
    "              \n",
    "        \n",
    "    #se sono presenti entrambi esco e elaboro dalla dir principale       \n",
    "    if f_p == True:\n",
    "        print('ce il file' )\n",
    "       # logger.info(\"I csv vaccini e titanic sono stati trovati in locale {}\".format(file_path))\n",
    "        return file_list\n",
    "    \n",
    "    #li scarico in materiale e li fornisco    \n",
    "    else:\n",
    "       # logger.info(\"Non sono stati trovati entrambi i csv titanic in locale {}\".format(file_path))\n",
    "        file_list = []\n",
    "        url = \"https://gist.githubusercontent.com/michhar/2dfd2de0d4f8727f873422c5d959fff5/raw/fa71405126017e6a37bea592440b4bee94bf7b9e/titanic.csv\"\n",
    "       # logger.info(\"Scarico il csv titanic da\\n{}\".format(url))\n",
    "        file_list.append({'titanic!': down_file(url,\"titanic!\")})\n",
    "        print('scarico il file in' + str(file_list))\n",
    "\n",
    "        \n",
    "        return file_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "inizio il tutto \n",
      "C:\\Users\\lyk\\Desktop\\roby\\Cloud_Traccia_1\n",
      "errore 2 \n",
      "ce il file\n"
     ]
    }
   ],
   "source": [
    "print('inizio il tutto ')\n",
    "check_dir(path_materiale)\n",
    "filename = check_file()\n",
    "\n",
    "\n",
    "\n",
    "#parte che fa cose \n",
    "file = str(file_path +'titanic.csv')\n",
    "df = pd.read_csv(file, encoding = \"utf-8 \")\n",
    "df.shape\n",
    "\n",
    "df['count_survived']=df['Survived'].value_counts()\n",
    "df['class_summed']=df['Pclass'].value_counts()\n",
    "df['eta_count']= df[\"Age\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [],
   "source": [
    "l_param = []\n",
    "l_param.append({\"value\":\"-?\",\"desc\":\"Elenca tutti i possibili campi ricercabili\"})\n",
    "l_param.append({\"value\":\"-survived\",\"desc\":\"Passeggeri sopravvissuti\"})\n",
    "l_param.append({\"value\":\"-class\",\"desc\":\"Classe di appertenenza del passeggero\"})\n",
    "l_param.append({\"value\":\"-age\",\"desc\":\"età dei passeggeri\"})\n",
    "l_param.append({\"value\":\"-sex_class\",\"desc\":\"percentuale sopravvissuti per sesso e classe \"})\n",
    "\n",
    "\n",
    "def list_parameters():\n",
    "    print ('LISTA DEI CAMPI A DISPOSIZIONE:\\n')\n",
    "    for i in l_param:\n",
    "        print(\"{}\\n-- {}\\n\\n\".format(i[\"value\"],i[\"desc\"]))\n",
    "\n",
    "    \n",
    "def totale_sopravvissuti(): \n",
    "    df['Survived']=np.where(df['Survived']==1 , 'sopravvissuti', 'deceduti')\n",
    "    fig, ax = plt.subplots(figsize=(8,4))\n",
    "    titolo = \"Numero di passeggeri sopravvissuti\"\n",
    "    plt.title(titolo, fontsize=15)\n",
    "    plt.xticks(rotation=75)\n",
    "    plt.barh(df[\"Survived\"],df['count_survived'])\n",
    "    filename = \"{}.png\".format(titolo)\n",
    "    plt.savefig(path_materiale+filename,bbox_inches='tight',dpi=300,transparent=False)\n",
    "def classe_viaggio(): \n",
    "    print(path_materiale)\n",
    "    print('ciao')\n",
    "    titolo = \"Classe di appartenenza\"\n",
    "    df['prima_classe'] = np.where(df['Pclass']== 1 , 1 , 0)\n",
    "    df['seconda_classe'] = np.where(df['Pclass']== 2 , 1 , 0)\n",
    "    df['terza_classe'] = np.where(df['Pclass']== 3 , 1 , 0)\n",
    "    data = {'prima_classe': int((df['prima_classe']).sum()) , 'seconda_classe': int((df['seconda_classe']).sum()), 'terza_classe': int((df['terza_classe']).sum())}\n",
    "    names = list(data.keys())\n",
    "    values = list(data.values())\n",
    "    fig = plt.figure()\n",
    "    ax = fig.add_axes([0,0,1,1])\n",
    "    ax.bar(names,values)\n",
    "    plt.title(titolo, fontsize=15)\n",
    "    filename = \"{}.png\".format(titolo)\n",
    "    plt.savefig(path_materiale+filename,bbox_inches='tight',dpi=300,transparent=False)\n",
    "    print(titolo)\n",
    "def class_sex():\n",
    "    titolo = \"percentuale_di_sopravvissuti_divisi_per_sesso_e_classe\"\n",
    "    sns.set_theme(style=\"whitegrid\")\n",
    "    g = sns.catplot(data=df, kind=\"bar\",x='Sex', y ='Survived' ,  hue=\"Pclass\", palette=\"dark\", alpha=.6, height=6)\n",
    "    g.despine(left=True)\n",
    "    g.set_axis_labels(\"\", \"% di sopravvissuti per sesso e classe \")\n",
    "    g.legend.set_title(\"\")\n",
    "    filename = \"{}.png\".format(titolo)\n",
    "    try:\n",
    "        plt.savefig(path_materiale+filename,bbox_inches='tight',dpi=300,transparent=False)\n",
    "        print('ha printato ')\n",
    "    except:\n",
    "        print('non ha scaricato ')\n",
    "def eta():\n",
    "    titolo = \"eta_deipasseggeri\"   \n",
    "    df['cat_age']=np.where(df['Age']<10, \"0-10\", df['Age'])\n",
    "    df['cat_age']=np.where(((df['Age']<20) & (df['Age']>=10)), \"10-20\", df['cat_age'])\n",
    "    df['cat_age']=np.where(((df['Age']<30) & (df['Age']>=20)), \"20-30\", df['cat_age'])\n",
    "    df['cat_age']=np.where(((df['Age']<40) & (df['Age']>=30)), \"30-40\", df['cat_age'])\n",
    "    df['cat_age']=np.where(((df['Age']<50) & (df['Age']>=40)), \"40-50\", df['cat_age'])\n",
    "    df['cat_age']=np.where(df['Age']>=50, \">50\", df['cat_age'])\n",
    "    \n",
    "    data = {'0-10': int((df['cat_age']==\"0-10\").sum()) , '10-20': int((df['cat_age']==\"10-20\").sum()), \n",
    "        '20-30': int((df['cat_age']==\"20-30\").sum()), '30-40': int((df['cat_age']==\"30-40\").sum()), \n",
    "        '40-50': int((df['cat_age']==\"40-50\").sum()), '>50': int((df['cat_age']==\">50\").sum())}\n",
    "    names = list(data.keys())\n",
    "    values = list(data.values())\n",
    "    fig = plt.figure()\n",
    "    ax = fig.add_axes([0,0,1,1])\n",
    "    ax.bar(names,values)\n",
    "    plt.title(titolo, fontsize=15)\n",
    "    filename = \"{}.png\".format(titolo)\n",
    "    plt.savefig(path_materiale+filename,bbox_inches='tight',dpi=300,transparent=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [],
   "source": [
    "#VEDIAMO QUALI SONO I PARAMETRI PASSATI E LANCIAMO LE FUNZIONI CORRISPONDENTI\n",
    "\n",
    "for i in range(1,len(sys.argv)):\n",
    "    command = sys.argv[i]\n",
    "    if command == \"-?\":\n",
    "        list_parameters()\n",
    "        quit()\n",
    "    if command == \"-survived\":\n",
    "        totale_sopravvissuti()\n",
    "    if command == \"-class\":\n",
    "        classe_viaggio()\n",
    "    if command == \"-age\":\n",
    "        eta()\n",
    "    if command == \"-sex_class\":\n",
    "        class_sex()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\n#SE NON SIAMO IN PROD CONVERTE IL NOTEBOOK, CANCELLA EVENTUALE BUILD PRECEDENTE E NE CREA UNA NUOVA\\nif os.getenv(\"PROD\") == None:\\n    \\n    command = \"jupyter nbconvert --to \\'script\\' main_2.ipynb\"\\n    os.system(command)\\n    #stoppo ed elimino eventuali contenitori aperti in modo da poter cancellare e ribuildare l\\'immagine senza crearne di nuove\\n    import subprocess\\n    container_ids = subprocess.check_output([\\'docker\\', \\'ps\\', \\'-aq\\'], encoding=\\'ascii\\')\\n    container_ids = container_ids.strip().split()\\n    if container_ids:\\n        subprocess.check_call([\\'docker\\', \\'stop\\'] + container_ids)\\n        subprocess.check_call([\\'docker\\', \\'rm\\'] + container_ids)\\n\\n### rimuovo tutte le immagini preesistenti di cloud_titanic        \\n    command = \"docker rmi cloud_titanic\"\\n    os.system(command)\\n    \\n    #command = \"docker run -e OPERATION = command -v cloud_titanic\"\\n    #os.system(command)\\n    \\n    #command = \"docker run -v $(PWD) -e DATASET= titanic.csv\"\\n    #os.system(command)\\n    #command = \"\"\\n#creo la mia immagine \\n\\n\\n    command = \"docker build -t cloud_titanic .\"\\n    os.system(command)\\n\\n    #command = \"docker run -it --entrypoint /bin/bash cloud_titanic\"\\n    #command = \"docker run -it cloud_titanic .\"\\n    #os.system(command)\\n'"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''\n",
    "#SE NON SIAMO IN PROD CONVERTE IL NOTEBOOK, CANCELLA EVENTUALE BUILD PRECEDENTE E NE CREA UNA NUOVA\n",
    "if os.getenv(\"PROD\") == None:\n",
    "    \n",
    "    command = \"jupyter nbconvert --to 'script' main_2.ipynb\"\n",
    "    os.system(command)\n",
    "    #stoppo ed elimino eventuali contenitori aperti in modo da poter cancellare e ribuildare l'immagine senza crearne di nuove\n",
    "    import subprocess\n",
    "    container_ids = subprocess.check_output(['docker', 'ps', '-aq'], encoding='ascii')\n",
    "    container_ids = container_ids.strip().split()\n",
    "    if container_ids:\n",
    "        subprocess.check_call(['docker', 'stop'] + container_ids)\n",
    "        subprocess.check_call(['docker', 'rm'] + container_ids)\n",
    "\n",
    "### rimuovo tutte le immagini preesistenti di cloud_titanic        \n",
    "    command = \"docker rmi cloud_titanic\"\n",
    "    os.system(command)\n",
    "    \n",
    "    #command = \"docker run -e OPERATION = command -v cloud_titanic\"\n",
    "    #os.system(command)\n",
    "    \n",
    "    #command = \"docker run -v $(PWD) -e DATASET= titanic.csv\"\n",
    "    #os.system(command)\n",
    "    #command = \"\"\n",
    "#creo la mia immagine \n",
    "\n",
    "\n",
    "    command = \"docker build -t cloud_titanic .\"\n",
    "    os.system(command)\n",
    "\n",
    "    #command = \"docker run -it --entrypoint /bin/bash cloud_titanic\"\n",
    "    #command = \"docker run -it cloud_titanic .\"\n",
    "    #os.system(command)\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
